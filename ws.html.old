<html>
	<head>

		<title>ws test</title>
	<style type="text/css">
#result {
	white-space: pre;
	font-family: monospace;
}

div#right {
	border-top: solid #000;
	padding-top: 5px;
}
.node {
	height: 50%;
	width: 60%;
}

.log {
	height: 100%;
	width: 35%;
	float: right;
	border-left: 2px dashed #000;
	padding-left: 10px;
}
	</style>
	</head>
	<body>
	<script type="text/javascript" src="base64js.min.js"></script>
	<script language="javascript">
var faketopic = [1, 2, 3, 4];
var seq;
// the addresses are the swarm overlay addresses of the pss nodes we are connecting to
var addr = {};
var pubkey = {};
var subs = {};
var conn = {};
var up = false;

function addLog(str, add) {
	elemid = add % 2 ? "left" : "right"; // opposite  is correct

	var logitem = document.createElement("p");
	logitem.setAttribute("class", "logitem");
	logitem.innerHTML = "[" + elemid + "]: " + str;
	document.getElementById("log").appendChild(logitem);
}

function initNode(add) {

	elemid =  add % 2 ? "right" : "left";

	conn[elemid].send('{"jsonrpc":"2.0","id":' + eval(1 + add) + ',"method":"pss_baseAddr","params":null}');
	conn[elemid].send('{"jsonrpc":"2.0","id":' + eval(3 + add) + ',"method":"pss_getPublicKey","params":null}');
	conn[elemid].send('{"jsonrpc":"2.0","id":' + eval(5 + add) + ',"method":"pss_subscribe","params":["receive","0x' + toHexString(faketopic) + '"]}');
	
}

function setHint(v, add) {

	elemid = add % 2 ? "right" : "left";
	targetid = add % 2 ? "left" : "right";
	
	console.log("hint for " + elemid + " setval: " + v + " + " + add + " .. pubkey " + pubkey[targetid] + " addr " + toHexString(addr[targetid].slice(0, v)));
	conn[elemid].send('{"jsonrpc":"2.0","id":' + eval(seq + add) + ',"method":"pss_setPeerPublicKey","params":[[' + pubkey[targetid] + '],"0x' + toHexString(faketopic) + '",[' + addr[targetid].slice(0, v)  + ']]}');
	seq += add % 2 ? 2 : 1;
}

function sendMsg(msg, add) {

	elemid = add % 2 ? "left" : "right";
	targetid = add % 2 ? "right" : "left"; // opposite  is correct

	console.log("send: " + msg + " strtobin : " + string2Bin(msg));

	conn[elemid].send('{"jsonrpc":"2.0","id":' + eval(seq + add) + ',"method":"pss_sendAsym","params":["0x' + toHexString(pubkey[targetid]) + '","0x' + toHexString(faketopic) + '",[' + string2Bin(msg) + ']]}');
	seq += add % 2 ? 2 : 1;
}

function recvNode(msg) {

	senderid = msg.id % 2 ? "left" : "right";

	if (msg.id < 3) {
		addr[senderid] = base64js.toByteArray(msg.result);
		document.getElementById("pss_" + senderid + "_addr_val").innerHTML = toHexString(addr[senderid]);

	} else if (msg.id < 5) {
		pubkey[senderid] = base64js.toByteArray(msg.result);
		document.getElementById("pss_" + senderid + "_pubkey_val").innerHTML = toHexString(pubkey[senderid].slice(0,32)) + "...";
	} else if (msg.id < 7) {
		subs[senderid] = msg.result;
	} else {
	 	console.log("unhandleed");
	}

	if (Object.keys(addr).length == 2 && Object.keys(pubkey).length == 2 && up == false) {
		seq = 7;
		setHint(document.getElementById("pss_left_hint").value, 0);
		setHint(document.getElementById("pss_right_hint").value, 1);
		addLog("foo", 0);
		up = true;
	}
}

if ('WebSocket' in window) {

	// "local" and "remote" are just names, they're both as local and remote as the other :)
	conn["left"] = new WebSocket("ws://localhost:8546");
	conn["right"] = new WebSocket("ws://localhost:8547");

	// local only does step 0 of the script
	conn["left"].onopen = function() {
		console.log("local ws open");
		initNode(0);
	}

	conn["right"].onopen = function() {
		console.log("local ws open");
		initNode(1);
	}

	// local receives messages
	conn["left"].onmessage = function(m) {
		msg = JSON.parse(m.data);
		console.log("left msg: " + m.data);
		recvNode(msg);	
	}

	conn["right"].onmessage = function(m) {
		msg = JSON.parse(m.data);
		console.log("right msg: " + m.data);
		recvNode(msg);	
	}

	conn["left"].onerror = connerror;
	conn["right"].onerror = connerror;

	function connerror(e) {
		console.log("error: " + e);
	}
}

// triggers
function script(step) {
	switch (step) {
	case 0:
		// get the local's address
		break;
	}
}

// cheekily borrowed from https://stackoverflow.com/questions/34309988/byte-array-to-hex-string-conversion-in-javascript
function toHexString(byteArray) {
  return Array.from(byteArray, function(byte) {
    return ('0' + (byte & 0xFF).toString(16)).slice(-2);
  }).join('');
}

// equally cheekily borrowed from https://stackoverflow.com/questions/17720394/javascript-string-to-byte-to-string
function string2Bin(str) {
  var result = [];
  for (var i = 0; i < str.length; i++) {
    result.push(str.charCodeAt(i));
  }
  return result;
}

function bin2String(array) {
  return String.fromCharCode.apply(String, array);
}

	</script>

	<div class="log" id="log">
	</div>
	<div class="node" id="left">
		<div class="info" id="pss_left_addr"><button id="pss_left_addr_get" onClick="getAddr(0);">Addr</button> <span id="pss_left_addr_val"></span></div>
		<div class="info" id="pss_left_pubkey">pubkey: <span id="pss_left_pubkey_val"></span></div>
		Address hint: <select onChange="setHint(this.value, 0);" id="pss_left_hint">
			<option defaultselected>32</option>
			<option defaultselected>4</option>
			<option defaultselected>1</option>
			<option defaultselected>0</option>
		</select>
		<input type="text" id="pss_left" /> <button onClick="sendMsg(document.getElementById('pss_left').value, 1);" id="pss_left_send">Send</button>
	</div>
	<div class="node" id="right">
		<div class="info" id="pss_right_addr">addr: <span id="pss_right_addr_val"></span></div>
		<div class="info" id="pss_right_pubkey">pubkey: <span id="pss_right_pubkey_val"></span></div>
		Address hint: <select onChange="setHint(this.value, 1);" id="pss_right_hint">
			<option defaultselected>32</option>
			<option defaultselected>4</option>
			<option defaultselected>1</option>
			<option defaultselected>0</option>
		</select>
		<input type="text" id="pss_right" /> <button onClick="sendMsg(document.getElementById('pss_right').value, 1);" id="pss_right_send">Send</button>

	</div>
	</body>
</html>
